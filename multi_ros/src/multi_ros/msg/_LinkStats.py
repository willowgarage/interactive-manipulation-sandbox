"""autogenerated by genpy from multi_ros/LinkStats.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import multi_ros.msg

class LinkStats(genpy.Message):
  _md5sum = "c1782d73262135f2f52b00dd37f73c57"
  _type = "multi_ros/LinkStats"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint64 total_bytes_sent
uint64 total_bytes_received
TopicLinkStats[] topic_link_stats

================================================================================
MSG: multi_ros/TopicLinkStats
string topic
uint64 bytes_sent
uint64 bytes_received
"""
  __slots__ = ['total_bytes_sent','total_bytes_received','topic_link_stats']
  _slot_types = ['uint64','uint64','multi_ros/TopicLinkStats[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       total_bytes_sent,total_bytes_received,topic_link_stats

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LinkStats, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.total_bytes_sent is None:
        self.total_bytes_sent = 0
      if self.total_bytes_received is None:
        self.total_bytes_received = 0
      if self.topic_link_stats is None:
        self.topic_link_stats = []
    else:
      self.total_bytes_sent = 0
      self.total_bytes_received = 0
      self.topic_link_stats = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2Q.pack(_x.total_bytes_sent, _x.total_bytes_received))
      length = len(self.topic_link_stats)
      buff.write(_struct_I.pack(length))
      for val1 in self.topic_link_stats:
        _x = val1.topic
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2Q.pack(_x.bytes_sent, _x.bytes_received))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.topic_link_stats is None:
        self.topic_link_stats = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.total_bytes_sent, _x.total_bytes_received,) = _struct_2Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.topic_link_stats = []
      for i in range(0, length):
        val1 = multi_ros.msg.TopicLinkStats()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.topic = str[start:end].decode('utf-8')
        else:
          val1.topic = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.bytes_sent, _x.bytes_received,) = _struct_2Q.unpack(str[start:end])
        self.topic_link_stats.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2Q.pack(_x.total_bytes_sent, _x.total_bytes_received))
      length = len(self.topic_link_stats)
      buff.write(_struct_I.pack(length))
      for val1 in self.topic_link_stats:
        _x = val1.topic
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_2Q.pack(_x.bytes_sent, _x.bytes_received))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.topic_link_stats is None:
        self.topic_link_stats = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.total_bytes_sent, _x.total_bytes_received,) = _struct_2Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.topic_link_stats = []
      for i in range(0, length):
        val1 = multi_ros.msg.TopicLinkStats()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.topic = str[start:end].decode('utf-8')
        else:
          val1.topic = str[start:end]
        _x = val1
        start = end
        end += 16
        (_x.bytes_sent, _x.bytes_received,) = _struct_2Q.unpack(str[start:end])
        self.topic_link_stats.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2Q = struct.Struct("<2Q")
