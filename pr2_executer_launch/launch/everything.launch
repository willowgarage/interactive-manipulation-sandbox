<launch>
  <arg name="throttle_cameras" default="true" />
  <arg name="sim" default="false" />
  <arg name="im" default="true" />
  <arg name="launch_kinect" default="true" />
  <arg name="multi_ros" default="true" />
  <arg name="wm" default="btm" />
  <arg name="kinect_data_skip" default="1" />

  <arg name="http_streamer" default="true" />
  <arg name="web_pointcloud_streaming" default="true" />

  <include file="$(find pr2_executer_launch)/launch/executer.launch">
    <arg name="sim" value="$(arg sim)" />
    <arg name="im" value="$(arg im)" />
    <arg name="launch_kinect" value="$(arg launch_kinect)" />
    <arg name="kinect_data_skip" value="$(arg kinect_data_skip)" />
  </include>

  <!-- rosbridge -->
  <param name="/rosbridge/port" value="9099"/>
  <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" />

  <group if="$(arg http_streamer)">
    <!-- http image topic video streamer -->
    <node name="ros_http_video_streamer" output="screen" pkg="ros_http_video_streamer" type="ros_http_video_streamer" >
      <param name="port" value="9999"/>
      <param name="framerate" value="15"/>
      <param name="bitrate" value="250000"/>
      <param name="profile" value="best"/>
      <param name="wwwroot" value="$(find depthcloudjs)/www"/>
    </node>
  </group>

  <group if="$(arg web_pointcloud_streaming)">
    <!-- http pointcloud streaming -->
    <node pkg="depthcloudjs" type="depthcloudjs"  name="depthcloudjs" output="screen">		
        <param name="rgb" value="/head_mount_kinect/rgb/image_color" />
        <param name="depth" value="/head_mount_kinect/depth_registered/image_rect" />
    </node>
  </group>


  <!-- TF2 Buffer Server -->
  <node pkg="tf2_ros" type="buffer_server" name="tf2_buffer_server" output="screen">
    <param name="buffer_size" value="120.0"/>
  </node>

  <!-- TF2 Web Republisher -->
  <node pkg="tf2_web_republisher" type="tf2_web_republisher" name="tf2_web_republisher" output="screen">
  </node>

  <!-- run image_rotate for both forearm camera images -->
  <group unless="$(arg im)">
      <node type="image_rotate" name="l_forearm_image_rotate" pkg="image_rotate" args="image:=l_forearm_cam/image_color rotated/image:=l_forearm_cam/image_color_rotated"/>
      <node type="image_rotate" name="r_forearm_image_rotate" pkg="image_rotate" args="image:=r_forearm_cam/image_color rotated/image:=r_forearm_cam/image_color_rotated"/>
  </group>

  <!-- camera throttling -->
  <group if="$(arg throttle_cameras)">

    <!-- the wide stereo camera -->
    <node name="throttle_wide_stereo" pkg="topic_tools" type="throttle" 
	args="messages /wide_stereo/left/image_rect_color 3.0 /wide_stereo_throttled/image"> 
      <param name="lazy" value="true"/>
    </node>

    <!-- the Kinect head camera -->
    <node name="throttle_kinect" pkg="topic_tools" type="throttle" 
	args="messages /head_mount_kinect/rgb/image_rect_color 3.0 /interactive_manipulation_camera/image"> 
      <param name="lazy" value="true"/>
    </node>

    <!-- the forearm cameras -->
    <node name="throttle_r_forearm_cam" pkg="topic_tools" type="throttle" 
	args="messages /r_forearm_cam/image_color_rotated 3.0 /r_forearm_cam_throttled/image"> 
      <param name="lazy" value="true"/>
    </node>
    <node name="throttle_l_forearm_cam" pkg="topic_tools" type="throttle" 
	args="messages /l_forearm_cam/image_color_rotated 3.0 /l_forearm_cam_throttled/image"> 
      <param name="lazy" value="true"/>
    </node>

  </group>



  <node name="throttle_plan" pkg="topic_tools" type="throttle"
    args="messages /move_base_node/NavfnROS/plan 0.20 /plan_throttled">
  </node>

  <!-- start multi_ros server -->
  <node if="$(arg multi_ros)" name="multi_ros_child" pkg="multi_ros" type="child">
  </node>

  <!-- robot pose publisher for world model -->
  <node name="robot_pose_publisher" pkg="robot_pose_publisher" type="robot_pose_publisher" respawn="true" />

  <!-- world model -->
  <node name="world_model" pkg="worldlib" type="world_model" >
    <param name="host" value="$(arg wm)" />
  </node>
  <node name="map_listener" pkg="world_listeners" type="map_listener" />
  <node name="robot_pose_listener" pkg="world_listeners" type="robot_pose_listener" />
</launch>
