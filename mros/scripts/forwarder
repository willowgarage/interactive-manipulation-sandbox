#!/user/bin/env python
import roslib; roslib.load_manifest('ros_forwarder')
import sys, threading, time, re, socket
import os, os.path
from multiprocessing import Process, Queue
import rospy
import rosgraph

old_connect_cb = None
my_uri = None
def subscribe_hack(self, topic, uri):
    print 'Subscribe_hack called for topic %s, uri %s' % (topic, uri)
    if 0:
        host_m = re.match(r'http:\/\/(.+):.+', uri)
        if host_m:
            hostname = host_m.groups()[0]
        if hostname  in (socket.gethostname(), 'localhost'):
            print 'Not subscribing to %s on localhost' % uri
            return
    if uri == my_uri:
        print 'Not subscribing to myself'
        return
    return old_connect_cb(self, topic, uri)

def message_class_from_type(message_type):
    package_name, message_type = message_type.split('/')
    try:
        package_dir = roslib.packages.get_pkg_dir(package_name)
    except Exception as e:
        print 'Failed to load package %s for message %s' % (package_name, message_type)
        return None
        
    sys.path.append(os.path.join(package_dir, 'src'))

    try:
        msgs_module = __import__('%s.msg' % package_name )
    except Exception as e:
        print 'Failed to load message module for package %s' % package_name
        return None
    
    try:
        msg_class = msgs_module.msg.__dict__[message_type]
    except Exception as e:
        print 'Failed to find class for message %s in module for package %s' % (message_type, package_name)
        return None
    print 'Loaded %s from %s' % (message_type, package_name)
    return msg_class

class Forwarder:
    def __init__(self, q_in, q_out):
        self._q_in = q_in
        self._q_out = q_out
        self._q_lock = threading.Lock()
        self._publishers = {}
        self._subscribers = {}
        self.shutdown_requested = False

    def message_callback(self, msg, topic):
        with self._q_lock:
            self._q_out.put((msg, topic))

    def forward(self, master_uri):
        global old_connect_cb, my_uri
        
        print 'Forwarding for master_uri %s' % master_uri
        os.environ['ROS_MASTER_URI'] = master_uri

        # install an ugly hack to keep us from subscribing to ourselves
        old_connect_cb = rospy.impl.registration.RegManager._connect_topic_thread
        rospy.impl.registration.RegManager._connect_topic_thread = subscribe_hack
        rospy.init_node('ros_forwarder')
        caller_id = rospy.get_caller_id()
        print 'Caller id: %s' % caller_id
        master = rosgraph.Master(caller_id)
        print 'My URI is: %s' % master.lookupNode(caller_id)
        my_uri = master.lookupNode(caller_id)
        
        # exchange topics
        local_topics = master.getPublishedTopics('')
        self._q_out.put(local_topics)
        remote_topics = self._q_in.get()

        print 'Got %d remote topics' % len(remote_topics)

        topics = set([tuple(t) for t in local_topics])
        topics.update([tuple(t) for t in remote_topics])

        # hack for testing
        topics = set([('/joint_states', 'sensor_msgs/JointState')])
                  
        # subscribe to all the topics
        for topic_name, message_type in topics:
            message_class = message_class_from_type(message_type)

            self._subscribers[topic_name] = rospy.Subscriber(topic_name, message_class, self.message_callback, topic_name)
            self._publishers[topic_name] = rospy.Publisher(topic_name, message_class)

        # wait for publishing/subscribing to happen
        time.sleep(0.5)
        for topic in self._subscribers:
            print 'Topic %s has %d subscribers' % (topic_name, self._subscribers[topic_name].get_num_connections())

        # get messages through the queue and republish them
        while not (rospy.is_shutdown() or self.shutdown_requested):
            msg, topic = self._q_in.get()
            try:
                self._publishers[topic].publish(msg)
                #print '%s: Re-published message on topic %s' % (master_uri, topic)
                pass
            except Exception as e:
                print 'Failed to republish message on %s: %s' % (topic, str(e))

server_master_uri = 'http://localhost:11311'
robot_name = sys.argv[1]
robot_master_uri = 'http://%s:11311' % robot_name
q1 = Queue()
q2 = Queue()
server_f = Forwarder(q1, q2)
robot_f = Forwarder(q2, q1)
p_robot_side = Process(target=robot_f.forward, args=(robot_master_uri,))

# start fowarding
p_robot_side.start()
server_f.forward(server_master_uri)
