#!/usr/bin/env python
import roslib; roslib.load_manifest('activity_manager')
import sys
import rospy
import actionlib
from geometry_msgs.msg import Pose, Point, Vector3
from activity_msgs.msg import EvaluateQueryAction, EvaluateQueryGoal, QueryArg

# used to convert between json strings and ROS messages
import json
from rosbridge_library.internal import message_conversion

def to_json(msg):
    if msg.__class__ in [str, int, float]:
        return json.dumps(msg)
    return json.dumps(message_conversion.extract_values(msg))

# params
query_name = sys.argv[1]
base_topic = 'activity_manager'

rospy.init_node('query_client', anonymous=True)

evaluate_query_topic = '%s/evaluate_query' % base_topic
client = actionlib.SimpleActionClient(evaluate_query_topic, EvaluateQueryAction)
client.wait_for_server()

def make_query_goal(query_str, query_args):
    goal = EvaluateQueryGoal()
    goal.query.query = query_str
    for arg_name, arg_val in query_args:
        goal.query.args.append(QueryArg(arg_name, to_json(arg_val)))
    return goal

queries = {
    'simple_get_transform' : make_query_goal(
        '(get_transform frame_a frame_b)',
        [('frame_a', 'r_wrist_roll_link'), ('frame_b', 'base_link')]),

    'simple_within_bbox' : make_query_goal(
        '(point_within_bbox point bbox_origin bbox_size)',
        [('point', Point(1.0, 1.0, 1.0)),
         ('bbox_origin', Point(0.0, 0.0, 0.0)),
         ('bbox_size', Vector3(1.5, 0.0, 2.3))]),

    'simple_transform_point_to_frame' : make_query_goal(
        '(transform_point_to_frame point current_frame desired_frame)',
        [('point', Point(1.0, 1.0, 1.0)),
         ('current_frame', 'r_wrist_roll_link'),
         ('desired_frame', 'base_link')]),

    'simple_is_charging' : make_query_goal('(is_charging)', []),

    'conjunction' : make_query_goal(
        '(and (is_charging) (point_within_bbox point bbox_origin bbox_size))',
        [('point', Point(1.0, 1.0, 1.0)),
         ('bbox_origin', Point(0.0, 0.0, 0.0)),
         ('bbox_size', Vector3(1.5, 0.0, 2.3))]),
    
}

query = queries[query_name]
print query
client.send_goal(query)
client.wait_for_result()

print client.get_result()
